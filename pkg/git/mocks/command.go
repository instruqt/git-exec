// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	git "github.com/instruqt/git-exec/pkg/git"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockCommand is an autogenerated mock type for the Command type
type MockCommand struct {
	mock.Mock
}

type MockCommand_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCommand) EXPECT() *MockCommand_Expecter {
	return &MockCommand_Expecter{mock: &_m.Mock}
}

// AddArgs provides a mock function with given fields: args
func (_m *MockCommand) AddArgs(args ...string) {
	_va := make([]interface{}, len(args))
	for _i := range args {
		_va[_i] = args[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockCommand_AddArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddArgs'
type MockCommand_AddArgs_Call struct {
	*mock.Call
}

// AddArgs is a helper method to define mock.On call
//   - args ...string
func (_e *MockCommand_Expecter) AddArgs(args ...interface{}) *MockCommand_AddArgs_Call {
	return &MockCommand_AddArgs_Call{Call: _e.mock.On("AddArgs",
		append([]interface{}{}, args...)...)}
}

func (_c *MockCommand_AddArgs_Call) Run(run func(args ...string)) *MockCommand_AddArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockCommand_AddArgs_Call) Return() *MockCommand_AddArgs_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCommand_AddArgs_Call) RunAndReturn(run func(...string)) *MockCommand_AddArgs_Call {
	_c.Run(run)
	return _c
}

// ApplyOptions provides a mock function with given fields: opts
func (_m *MockCommand) ApplyOptions(opts ...git.Option) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockCommand_ApplyOptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyOptions'
type MockCommand_ApplyOptions_Call struct {
	*mock.Call
}

// ApplyOptions is a helper method to define mock.On call
//   - opts ...git.Option
func (_e *MockCommand_Expecter) ApplyOptions(opts ...interface{}) *MockCommand_ApplyOptions_Call {
	return &MockCommand_ApplyOptions_Call{Call: _e.mock.On("ApplyOptions",
		append([]interface{}{}, opts...)...)}
}

func (_c *MockCommand_ApplyOptions_Call) Run(run func(opts ...git.Option)) *MockCommand_ApplyOptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]git.Option, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(git.Option)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockCommand_ApplyOptions_Call) Return() *MockCommand_ApplyOptions_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCommand_ApplyOptions_Call) RunAndReturn(run func(...git.Option)) *MockCommand_ApplyOptions_Call {
	_c.Run(run)
	return _c
}

// Execute provides a mock function with no fields
func (_m *MockCommand) Execute() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommand_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockCommand_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
func (_e *MockCommand_Expecter) Execute() *MockCommand_Execute_Call {
	return &MockCommand_Execute_Call{Call: _e.mock.On("Execute")}
}

func (_c *MockCommand_Execute_Call) Run(run func()) *MockCommand_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCommand_Execute_Call) Return(_a0 []byte, _a1 error) *MockCommand_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommand_Execute_Call) RunAndReturn(run func() ([]byte, error)) *MockCommand_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteCombined provides a mock function with no fields
func (_m *MockCommand) ExecuteCombined() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ExecuteCombined")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommand_ExecuteCombined_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteCombined'
type MockCommand_ExecuteCombined_Call struct {
	*mock.Call
}

// ExecuteCombined is a helper method to define mock.On call
func (_e *MockCommand_Expecter) ExecuteCombined() *MockCommand_ExecuteCombined_Call {
	return &MockCommand_ExecuteCombined_Call{Call: _e.mock.On("ExecuteCombined")}
}

func (_c *MockCommand_ExecuteCombined_Call) Run(run func()) *MockCommand_ExecuteCombined_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCommand_ExecuteCombined_Call) Return(_a0 []byte, _a1 error) *MockCommand_ExecuteCombined_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommand_ExecuteCombined_Call) RunAndReturn(run func() ([]byte, error)) *MockCommand_ExecuteCombined_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteWithStderr provides a mock function with no fields
func (_m *MockCommand) ExecuteWithStderr() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ExecuteWithStderr")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommand_ExecuteWithStderr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteWithStderr'
type MockCommand_ExecuteWithStderr_Call struct {
	*mock.Call
}

// ExecuteWithStderr is a helper method to define mock.On call
func (_e *MockCommand_Expecter) ExecuteWithStderr() *MockCommand_ExecuteWithStderr_Call {
	return &MockCommand_ExecuteWithStderr_Call{Call: _e.mock.On("ExecuteWithStderr")}
}

func (_c *MockCommand_ExecuteWithStderr_Call) Run(run func()) *MockCommand_ExecuteWithStderr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCommand_ExecuteWithStderr_Call) Return(_a0 []byte, _a1 error) *MockCommand_ExecuteWithStderr_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommand_ExecuteWithStderr_Call) RunAndReturn(run func() ([]byte, error)) *MockCommand_ExecuteWithStderr_Call {
	_c.Call.Return(run)
	return _c
}

// GetArgs provides a mock function with no fields
func (_m *MockCommand) GetArgs() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetArgs")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockCommand_GetArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetArgs'
type MockCommand_GetArgs_Call struct {
	*mock.Call
}

// GetArgs is a helper method to define mock.On call
func (_e *MockCommand_Expecter) GetArgs() *MockCommand_GetArgs_Call {
	return &MockCommand_GetArgs_Call{Call: _e.mock.On("GetArgs")}
}

func (_c *MockCommand_GetArgs_Call) Run(run func()) *MockCommand_GetArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCommand_GetArgs_Call) Return(_a0 []string) *MockCommand_GetArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommand_GetArgs_Call) RunAndReturn(run func() []string) *MockCommand_GetArgs_Call {
	_c.Call.Return(run)
	return _c
}

// SetArgs provides a mock function with given fields: args
func (_m *MockCommand) SetArgs(args []string) {
	_m.Called(args)
}

// MockCommand_SetArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetArgs'
type MockCommand_SetArgs_Call struct {
	*mock.Call
}

// SetArgs is a helper method to define mock.On call
//   - args []string
func (_e *MockCommand_Expecter) SetArgs(args interface{}) *MockCommand_SetArgs_Call {
	return &MockCommand_SetArgs_Call{Call: _e.mock.On("SetArgs", args)}
}

func (_c *MockCommand_SetArgs_Call) Run(run func(args []string)) *MockCommand_SetArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *MockCommand_SetArgs_Call) Return() *MockCommand_SetArgs_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCommand_SetArgs_Call) RunAndReturn(run func([]string)) *MockCommand_SetArgs_Call {
	_c.Run(run)
	return _c
}

// SetEnv provides a mock function with given fields: key, value
func (_m *MockCommand) SetEnv(key string, value string) {
	_m.Called(key, value)
}

// MockCommand_SetEnv_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetEnv'
type MockCommand_SetEnv_Call struct {
	*mock.Call
}

// SetEnv is a helper method to define mock.On call
//   - key string
//   - value string
func (_e *MockCommand_Expecter) SetEnv(key interface{}, value interface{}) *MockCommand_SetEnv_Call {
	return &MockCommand_SetEnv_Call{Call: _e.mock.On("SetEnv", key, value)}
}

func (_c *MockCommand_SetEnv_Call) Run(run func(key string, value string)) *MockCommand_SetEnv_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockCommand_SetEnv_Call) Return() *MockCommand_SetEnv_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCommand_SetEnv_Call) RunAndReturn(run func(string, string)) *MockCommand_SetEnv_Call {
	_c.Run(run)
	return _c
}

// SetStdin provides a mock function with given fields: input
func (_m *MockCommand) SetStdin(input string) {
	_m.Called(input)
}

// MockCommand_SetStdin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetStdin'
type MockCommand_SetStdin_Call struct {
	*mock.Call
}

// SetStdin is a helper method to define mock.On call
//   - input string
func (_e *MockCommand_Expecter) SetStdin(input interface{}) *MockCommand_SetStdin_Call {
	return &MockCommand_SetStdin_Call{Call: _e.mock.On("SetStdin", input)}
}

func (_c *MockCommand_SetStdin_Call) Run(run func(input string)) *MockCommand_SetStdin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCommand_SetStdin_Call) Return() *MockCommand_SetStdin_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCommand_SetStdin_Call) RunAndReturn(run func(string)) *MockCommand_SetStdin_Call {
	_c.Run(run)
	return _c
}

// SetTimeout provides a mock function with given fields: timeout
func (_m *MockCommand) SetTimeout(timeout time.Duration) {
	_m.Called(timeout)
}

// MockCommand_SetTimeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTimeout'
type MockCommand_SetTimeout_Call struct {
	*mock.Call
}

// SetTimeout is a helper method to define mock.On call
//   - timeout time.Duration
func (_e *MockCommand_Expecter) SetTimeout(timeout interface{}) *MockCommand_SetTimeout_Call {
	return &MockCommand_SetTimeout_Call{Call: _e.mock.On("SetTimeout", timeout)}
}

func (_c *MockCommand_SetTimeout_Call) Run(run func(timeout time.Duration)) *MockCommand_SetTimeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration))
	})
	return _c
}

func (_c *MockCommand_SetTimeout_Call) Return() *MockCommand_SetTimeout_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCommand_SetTimeout_Call) RunAndReturn(run func(time.Duration)) *MockCommand_SetTimeout_Call {
	_c.Run(run)
	return _c
}

// SetWorkingDir provides a mock function with given fields: dir
func (_m *MockCommand) SetWorkingDir(dir string) {
	_m.Called(dir)
}

// MockCommand_SetWorkingDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetWorkingDir'
type MockCommand_SetWorkingDir_Call struct {
	*mock.Call
}

// SetWorkingDir is a helper method to define mock.On call
//   - dir string
func (_e *MockCommand_Expecter) SetWorkingDir(dir interface{}) *MockCommand_SetWorkingDir_Call {
	return &MockCommand_SetWorkingDir_Call{Call: _e.mock.On("SetWorkingDir", dir)}
}

func (_c *MockCommand_SetWorkingDir_Call) Run(run func(dir string)) *MockCommand_SetWorkingDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCommand_SetWorkingDir_Call) Return() *MockCommand_SetWorkingDir_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCommand_SetWorkingDir_Call) RunAndReturn(run func(string)) *MockCommand_SetWorkingDir_Call {
	_c.Run(run)
	return _c
}

// NewMockCommand creates a new instance of MockCommand. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCommand(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCommand {
	mock := &MockCommand{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
