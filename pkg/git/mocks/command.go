// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	git "github.com/instruqt/git-exec/pkg/git"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Command is an autogenerated mock type for the Command type
type Command struct {
	mock.Mock
}

// AddArgs provides a mock function with given fields: args
func (_m *Command) AddArgs(args ...string) {
	_va := make([]interface{}, len(args))
	for _i := range args {
		_va[_i] = args[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// ApplyOptions provides a mock function with given fields: opts
func (_m *Command) ApplyOptions(opts ...git.Option) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Execute provides a mock function with no fields
func (_m *Command) Execute() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecuteCombined provides a mock function with no fields
func (_m *Command) ExecuteCombined() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ExecuteCombined")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecuteWithStderr provides a mock function with no fields
func (_m *Command) ExecuteWithStderr() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ExecuteWithStderr")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArgs provides a mock function with no fields
func (_m *Command) GetArgs() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetArgs")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// SetArgs provides a mock function with given fields: args
func (_m *Command) SetArgs(args []string) {
	_m.Called(args)
}

// SetEnv provides a mock function with given fields: key, value
func (_m *Command) SetEnv(key string, value string) {
	_m.Called(key, value)
}

// SetStdin provides a mock function with given fields: input
func (_m *Command) SetStdin(input string) {
	_m.Called(input)
}

// SetTimeout provides a mock function with given fields: timeout
func (_m *Command) SetTimeout(timeout time.Duration) {
	_m.Called(timeout)
}

// SetWorkingDir provides a mock function with given fields: dir
func (_m *Command) SetWorkingDir(dir string) {
	_m.Called(dir)
}

// NewCommand creates a new instance of Command. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCommand(t interface {
	mock.TestingT
	Cleanup(func())
}) *Command {
	mock := &Command{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
